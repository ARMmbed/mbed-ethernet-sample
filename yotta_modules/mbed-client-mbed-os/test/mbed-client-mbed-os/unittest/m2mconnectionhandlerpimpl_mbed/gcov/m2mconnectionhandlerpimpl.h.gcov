        -:    0:Source:../../../../mbed-client-mbed-os/m2mconnectionhandlerpimpl.h
        -:    0:Graph:objs/m2mconnectionhandlerimpl_mbed_unit/m2mconnectionhandlerpimpl.gcno
        -:    0:Data:objs/m2mconnectionhandlerimpl_mbed_unit/m2mconnectionhandlerpimpl.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Copyright (c) 2015 ARM Limited. All rights reserved.
        -:    3: * SPDX-License-Identifier: Apache-2.0
        -:    4: * Licensed under the Apache License, Version 2.0 (the License); you may
        -:    5: * not use this file except in compliance with the License.
        -:    6: * You may obtain a copy of the License at
        -:    7: *
        -:    8: * http://www.apache.org/licenses/LICENSE-2.0
        -:    9: *
        -:   10: * Unless required by applicable law or agreed to in writing, software
        -:   11: * distributed under the License is distributed on an AS IS BASIS, WITHOUT
        -:   12: * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   13: * See the License for the specific language governing permissions and
        -:   14: * limitations under the License.
        -:   15: */
        -:   16:#ifndef M2M_CONNECTION_HANDLER_PIMPL_H__
        -:   17:#define M2M_CONNECTION_HANDLER_PIMPL_H__
        -:   18:
        -:   19:#include "mbed-client/m2mconfig.h"
        -:   20:#include "mbed-client/m2minterface.h"
        -:   21:#include "mbed-client/m2mconnectionobserver.h"
        -:   22:#include "mbed-client/m2mconnectionsecurity.h"
        -:   23:#include "mbed-client/m2mconstants.h"
        -:   24:#include "nsdl-c/sn_nsdl.h"
        -:   25:#include "sockets/Socket.h"
        -:   26:#include "sal/socket_api.h"
        -:   27:
        -:   28:using namespace mbed::Sockets::v0;
        -:   29:
        -:   30:class M2MConnectionSecurity;
        -:   31:class M2MConnectionHandler;
        -:   32:class M2MSecurity;
        -:   33:/**
        -:   34: * @brief M2MConnectionHandlerPimpl.
        -:   35: * This class handles the socket connection for LWM2M Client
        -:   36: */
        -:   37:
        -:   38:
        -:   39:class M2MConnectionHandlerPimpl {
        -:   40:private:
        -:   41:    class MbedSocket : public Socket{
        -:   42:    public:
       21:   43:        MbedSocket(socket_stack_t stack, socket_proto_family_t fa) : Socket(stack){_socket.family = fa;}
        -:   44:
       42:   45:        ~MbedSocket(){}
        -:   46:
        3:   47:        socket_error_t connect(const SocketAddr *address, const uint16_t port){
        3:   48:            if( _socket.api )
    #####:   49:                return _socket.api->connect(&_socket, address->getAddr(), port);
        3:   50:            return SOCKET_ERROR_UNKNOWN;
        -:   51:        }
        -:   52:    };
        -:   53:
        -:   54:public:
        -:   55:
        -:   56:    /**
        -:   57:    * @brief Constructor
        -:   58:    */
        -:   59:    M2MConnectionHandlerPimpl(M2MConnectionHandler* base, M2MConnectionObserver &observer,
        -:   60:                              M2MConnectionSecurity* sec,
        -:   61:                              M2MInterface::BindingMode mode,
        -:   62:                              M2MInterface::NetworkStack stack);
        -:   63:
        -:   64:    /**
        -:   65:    * @brief Destructor
        -:   66:    */
        -:   67:    ~M2MConnectionHandlerPimpl();
        -:   68:
        -:   69:    /**
        -:   70:    * @brief This binds the socket connection.
        -:   71:    * @param listen_port Port to listen for incoming connection.
        -:   72:    * @return true if successfulelse false.
        -:   73:    */
        -:   74:    bool bind_connection(const uint16_t listen_port);
        -:   75:
        -:   76:    /**
        -:   77:    * @brief This resolves the server address. Output is
        -:   78:    * returned through callback
        -:   79:    * @param String server address.
        -:   80:    * @param uint16_t Server port.
        -:   81:    * @param ServerType, Server Type to be resolved.
        -:   82:    * @return true if address is valid else false.
        -:   83:    */
        -:   84:    bool resolve_server_address(const String& server_address,
        -:   85:                                const uint16_t server_port,
        -:   86:                                M2MConnectionObserver::ServerType server_type,
        -:   87:                                const M2MSecurity* security);
        -:   88:
        -:   89:    /**
        -:   90:    * @brief Sends data, to the connected sent to server.
        -:   91:    * @param data, Data to be sent.
        -:   92:    */
        -:   93:    bool send_data(uint8_t *data_ptr,
        -:   94:                   uint16_t data_len,
        -:   95:                   sn_nsdl_addr_s *address_ptr);
        -:   96:
        -:   97:    /**
        -:   98:    * @brief Listens for incoming data from remote server
        -:   99:    * @return true if successful else false.
        -:  100:    */
        -:  101:    bool start_listening_for_data();
        -:  102:
        -:  103:    /**
        -:  104:    * @brief Stops listening for incoming data
        -:  105:    */
        -:  106:    void stop_listening();
        -:  107:
        -:  108:    /**
        -:  109:     * @brief send_to_socket Sends directly to socket. This is used by
        -:  110:     * security classes to send after data has been encrypted.
        -:  111:     * @param buf Buffer to send
        -:  112:     * @param len Length of a buffer
        -:  113:     * @return Number of bytes sent or -1 if failed
        -:  114:     */
        -:  115:    int send_to_socket(const unsigned char *buf, size_t len);
        -:  116:
        -:  117:    /**
        -:  118:     * @brief receive_from_socket Receives directly from a socket. This
        -:  119:     * is used by security classes to receive raw data to be decrypted.
        -:  120:     * @param buf Buffer to send
        -:  121:     * @param len Length of a buffer
        -:  122:     * @return Number of bytes read or -1 if failed.
        -:  123:     */
        -:  124:    int receive_from_socket(unsigned char *buf, size_t len);
        -:  125:
        -:  126:    /**
        -:  127:    * @brief Error handling for DTLS connectivity.
        -:  128:    * @param error, Error code from TLS library
        -:  129:    */
        -:  130:    void handle_connection_error(int error);
        -:  131:
        -:  132:private:
        -:  133:
        -:  134:    /**
        -:  135:    * @brief Callback handler for sending data over socket.
        -:  136:    */
        -:  137:    void send_handler(Socket *socket, uint16_t data_sent);
        -:  138:
        -:  139:    /**
        -:  140:    * @brief Callback handler for receiving data over socket.
        -:  141:    */
        -:  142:    void receive_handler(Socket *socket);
        -:  143:
        -:  144:    /**
        -:  145:    * @brief Callback handler for dns resolving of address
        -:  146:    */
        -:  147:    void dns_handler(Socket *socket, struct socket_addr sa, const char *domain);
        -:  148:
        -:  149:    /**
        -:  150:    * @brief Callback handler for dns resolving of address
        -:  151:    */
        -:  152:    void error_handler(Socket *socket, socket_error_t error);
        -:  153:
        -:  154:    /**
        -:  155:    * @brief Callback handler for receiving data for secured connection.
        -:  156:    */
        -:  157:    void receive_handshake_handler(Socket *socket);
        -:  158:
        -:  159:private:
        -:  160:    M2MConnectionHandler                        *_base;
        -:  161:    M2MConnectionObserver                       &_observer;
        -:  162:    M2MConnectionSecurity                       *_security_impl; //owned
        -:  163:    const M2MSecurity                           *_security; //Not owned
        -:  164:    bool                                        _use_secure_connection;
        -:  165:    String                                      _server_address;
        -:  166:    unsigned char                               _receive_buffer[BUFFER_LENGTH];
        -:  167:    M2MInterface::BindingMode                   _binding_mode;
        -:  168:    M2MInterface::NetworkStack                  _network_stack;
        -:  169:    uint8_t                                     _received_address[16];
        -:  170:    M2MConnectionObserver::SocketAddress        *_socket_address;
        -:  171:    SocketAddr                                  *_resolved_Address;
        -:  172:    M2MConnectionObserver::ServerType           _server_type;
        -:  173:    uint16_t                                    _server_port;
        -:  174:    bool                                        _resolved;
        -:  175:    socket_stack_t                              _socket_stack;
        -:  176:    bool                                        _is_handshaking;
        -:  177:    MbedSocket                                 *_mbed_socket;            //owned
        -:  178:
        -:  179:friend class Test_M2MConnectionHandlerPimpl;
        -:  180:friend class Test_M2MConnectionHandlerPimpl_mbed;
        -:  181:friend class M2MConnection_TestObserver;
        -:  182:};
        -:  183:
        -:  184:#endif //M2M_CONNECTION_HANDLER_PIMPL_H__
        -:  185:
