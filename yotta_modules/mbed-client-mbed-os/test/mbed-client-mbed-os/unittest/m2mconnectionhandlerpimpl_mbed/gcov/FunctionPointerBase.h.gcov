        -:    0:Source:../common/FunctionPointerBase.h
        -:    0:Graph:objs/m2mconnectionhandlerimpl_mbed_unit/m2mconnectionhandlerpimpl.gcno
        -:    0:Data:objs/m2mconnectionhandlerimpl_mbed_unit/m2mconnectionhandlerpimpl.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* mbed Microcontroller Library
        -:    2: * Copyright (c) 2015 ARM Limited
        -:    3: *
        -:    4: * Licensed under the Apache License, Version 2.0 (the "License");
        -:    5: * you may not use this file except in compliance with the License.
        -:    6: * You may obtain a copy of the License at
        -:    7: *
        -:    8: *     http://www.apache.org/licenses/LICENSE-2.0
        -:    9: *
        -:   10: * Unless required by applicable law or agreed to in writing, software
        -:   11: * distributed under the License is distributed on an "AS IS" BASIS,
        -:   12: * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   13: * See the License for the specific language governing permissions and
        -:   14: * limitations under the License.
        -:   15: */
        -:   16:#ifndef MBED_FUNCTIONPOINTERBASE_H
        -:   17:#define MBED_FUNCTIONPOINTERBASE_H
        -:   18:
        -:   19:#include <string.h>
        -:   20:#include <stdint.h>
        -:   21:#include <stddef.h>
        -:   22:#include <stdarg.h>
        -:   23:namespace mbed {
        -:   24:
        -:   25:template<typename R>
        -:   26:class FunctionPointerBase {
        -:   27:public:
        -:   28:    operator bool(void) const {
        -:   29:        return (_membercaller != NULL) && (_object != NULL);
        -:   30:    }
        -:   31:
        -:   32:    /**
        -:   33:     * Clears the current function pointer assignment
        -:   34:     * After clear(), this instance will point to nothing (NULL)
        -:   35:     */
    #####:   36:    virtual void clear() {
    #####:   37:        _membercaller = NULL;
    #####:   38:        _object = NULL;
    #####:   39:    }
        -:   40:
        -:   41:protected:
        -:   42:    struct ArgOps {
        -:   43:        void (*constructor)(void *, va_list);
        -:   44:        void (*copy_args)(void *, void *);
        -:   45:        void (*destructor)(void *);
        -:   46:    };
        -:   47:    void * _object; // object Pointer/function pointer
        -:   48:    R (*_membercaller)(void *, uintptr_t *, void *);
        -:   49:    // aligned raw member function pointer storage - converted back by registered _membercaller
        -:   50:    uintptr_t _member[4];
        -:   51:    static const struct ArgOps _nullops;
        -:   52:
        -:   53:protected:
    #####:   54:    FunctionPointerBase():_object(NULL), _membercaller(NULL) {}
        -:   55:    FunctionPointerBase(const FunctionPointerBase<R> & fp) {
        -:   56:        copy(&fp);
        -:   57:    }
    #####:   58:    virtual ~FunctionPointerBase() {
    #####:   59:    }
        -:   60:
        -:   61:    /**
        -:   62:     * Calls the member pointed to by object::member or (function)object
        -:   63:     * @param arg
        -:   64:     * @return
        -:   65:     */
        -:   66:    inline R call(void* arg) {
        -:   67:        return _membercaller(_object, _member, arg);
        -:   68:    }
        -:   69:
        -:   70:    void copy(const FunctionPointerBase<R> * fp) {
        -:   71:        _object = fp->_object;
        -:   72:        memcpy (_member, fp->_member, sizeof(_member));
        -:   73:        _membercaller = fp->_membercaller;
        -:   74:    }
        -:   75:private:
        -:   76:    static void _null_constructor(void * dest, va_list args) {(void) dest;(void) args;}
        -:   77:    static void _null_copy_args(void *dest , void* src) {(void) dest; (void) src;}
        -:   78:    static void _null_destructor(void *args) {(void) args;}
        -:   79:
        -:   80:};
        -:   81:template<typename R>
        -:   82:const struct FunctionPointerBase<R>::ArgOps FunctionPointerBase<R>::_nullops = {
        -:   83:    FunctionPointerBase<R>::_null_constructor,
        -:   84:    FunctionPointerBase<R>::_null_copy_args,
        -:   85:    FunctionPointerBase<R>::_null_destructor
        -:   86:};
        -:   87:
        -:   88:}
        -:   89:#endif
