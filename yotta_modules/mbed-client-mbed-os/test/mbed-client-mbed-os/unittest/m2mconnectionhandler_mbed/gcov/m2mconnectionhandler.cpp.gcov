        -:    0:Source:../../../../source/m2mconnectionhandler.cpp
        -:    0:Graph:objs/m2mconnectionhandler_mbed_unit/m2mconnectionhandler.gcno
        -:    0:Data:objs/m2mconnectionhandler_mbed_unit/m2mconnectionhandler.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Copyright (c) 2015 ARM Limited. All rights reserved.
        -:    3: * SPDX-License-Identifier: Apache-2.0
        -:    4: * Licensed under the Apache License, Version 2.0 (the License); you may
        -:    5: * not use this file except in compliance with the License.
        -:    6: * You may obtain a copy of the License at
        -:    7: *
        -:    8: * http://www.apache.org/licenses/LICENSE-2.0
        -:    9: *
        -:   10: * Unless required by applicable law or agreed to in writing, software
        -:   11: * distributed under the License is distributed on an AS IS BASIS, WITHOUT
        -:   12: * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   13: * See the License for the specific language governing permissions and
        -:   14: * limitations under the License.
        -:   15: */
        -:   16:#include "mbed-client-mbed-os/m2mconnectionhandlerpimpl.h"
        -:   17:#include "mbed-client/m2mconnectionobserver.h"
        -:   18:#include "mbed-client/m2mconnectionhandler.h"
        -:   19:#include "mbed-client/m2mconstants.h"
        -:   20:
        9:   21:M2MConnectionHandler::M2MConnectionHandler(M2MConnectionObserver &observer,
        -:   22:                                           M2MConnectionSecurity* sec,
        -:   23:                                           M2MInterface::BindingMode mode,
        -:   24:                                           M2MInterface::NetworkStack stack)
        9:   25::_observer(observer)
        -:   26:{
        9:   27:    _private_impl = new M2MConnectionHandlerPimpl(this, observer, sec, mode, stack);
        9:   28:}
        -:   29:
        9:   30:M2MConnectionHandler::~M2MConnectionHandler()
        -:   31:{
        9:   32:    delete _private_impl;
        9:   33:}
        -:   34:
        1:   35:bool M2MConnectionHandler::bind_connection(const uint16_t listen_port)
        -:   36:{
        -:   37:
        1:   38:    return _private_impl->bind_connection(listen_port);
        -:   39:}
        -:   40:
        1:   41:bool M2MConnectionHandler::resolve_server_address(const String& server_address,
        -:   42:                                                      const uint16_t server_port,
        -:   43:                                                      M2MConnectionObserver::ServerType server_type,
        -:   44:                                                      const M2MSecurity* security)
        -:   45:{
        -:   46:    return _private_impl->resolve_server_address(server_address, server_port,
        1:   47:                                                 server_type, security);
        -:   48:}
        -:   49:
        1:   50:bool M2MConnectionHandler::start_listening_for_data()
        -:   51:{
        1:   52:    return _private_impl->start_listening_for_data();
        -:   53:}
        -:   54:
        1:   55:void M2MConnectionHandler::stop_listening()
        -:   56:{
        1:   57:    _private_impl->stop_listening();
        1:   58:}
        -:   59:
        1:   60:int M2MConnectionHandler::send_to_socket(const unsigned char *buf, size_t len)
        -:   61:{
        1:   62:    return _private_impl->send_to_socket(buf, len);
        -:   63:}
        -:   64:
        1:   65:int M2MConnectionHandler::receive_from_socket(unsigned char *buf, size_t len)
        -:   66:{
        1:   67:    return _private_impl->receive_from_socket(buf, len);
        -:   68:}
        -:   69:
        1:   70:bool M2MConnectionHandler::send_data(uint8_t *data,
        -:   71:                                     uint16_t data_len,
        -:   72:                                     sn_nsdl_addr_s *address)
        -:   73:{
        1:   74:    return _private_impl->send_data(data, data_len, address);
        -:   75:}
        -:   76:
        1:   77:void M2MConnectionHandler::handle_connection_error(int error)
        -:   78:{
        1:   79:    _private_impl->handle_connection_error(error);
        1:   80:}
        -:   81:
