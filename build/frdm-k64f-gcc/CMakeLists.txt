# NOTE: This file is generated by yotta: changes will be overwritten!

cmake_minimum_required(VERSION 2.8.11)

enable_testing()

# add a dummy target for all autogenerated tests, so we can build them all
# even though they are EXCLUDE_FROMALL'd, if you use custom CMakeLists you can
# add a dependency of this target on your test programs, by adding:
# add_dependencies(all_tests your_test_name)
add_custom_target(all_tests)


# always use the CMAKE_MODULE_PATH-provided .cmake files, even when including
# from system directories:
cmake_policy(SET CMP0017 OLD)

# toolchain file for frdm-k64f-gcc
set(CMAKE_TOOLCHAIN_FILE "/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/toolchain.cmake")

# provide function for post-processing executables
function (yotta_postprocess_target target_type_ target_name_)
    if(COMMAND yotta_apply_target_rules)
        yotta_apply_target_rules(${target_type_} ${target_name_})
    endif()

    # For backwards compatibility, support YOTTA_POSTPROCESS_COMMAND.
    if(DEFINED YOTTA_POSTPROCESS_COMMAND AND ${target_type_} STREQUAL "EXECUTABLE")
        #message(AUTHOR_WARNING "This target defines a YOTTA_POSTPROCESS_COMMAND for which support has been deprecated. Please define a CMake function yotta_apply_target_rules(build_object_type build_object) instead.")
        string(REPLACE YOTTA_CURRENT_EXE_NAME "${target_name_}" LOCAL_POSTPROCESS_COMMAND "${YOTTA_POSTPROCESS_COMMAND}")
        separate_arguments(LOCAL_POSTPROCESS_COMMAND_SEPARATED UNIX_COMMAND ${LOCAL_POSTPROCESS_COMMAND})
        add_custom_command(
            TARGET ${target_name_}
            POST_BUILD
            COMMAND ${LOCAL_POSTPROCESS_COMMAND_SEPARATED}
        )
    endif()
endfunction()

# set target-defined definitions
set(YOTTA_BUILD_YEAR "2016") # UTC year
set(YOTTA_BUILD_MONTH "2") # UTC month 1-12
set(YOTTA_BUILD_DAY "23") # UTC day 1-31
set(YOTTA_BUILD_HOUR "23") # UTC hour 0-24
set(YOTTA_BUILD_MINUTE "44") # UTC minute 0-59
set(YOTTA_BUILD_SECOND "44") # UTC second 0-61
set(YOTTA_BUILD_UUID "c20fa958-ba31-4f89-bee9-5fd048b2701b") # unique random UUID for each build
set(YOTTA_BUILD_VCS_ID "5593070cbc165c17d34cf5d091113bc39f2222fa") # git or mercurial hash
set(YOTTA_BUILD_VCS_CLEAN "1") # evaluates true if the version control system was clean, otherwise false
set(TARGET FRDM_K64F_GCC)
set(TARGET_LIKE_FRDM_K64F_GCC TRUE)
set(YOTTA_BUILD_INFO_HEADER "/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/yotta_build_info.h")
set(TARGET_LIKE_FRDM_K64F_GCC TRUE)
set(TARGET_LIKE_FRDM_K64F TRUE)
set(TARGET_LIKE_LWIP TRUE)
set(TARGET_LIKE_LWIP_K64F TRUE)
set(TARGET_LIKE_ETH_K64F TRUE)
set(TARGET_LIKE_KINETIS_K64_GCC TRUE)
set(TARGET_LIKE_K64F TRUE)
set(TARGET_LIKE_KSDK_MCU TRUE)
set(TARGET_LIKE_MK64FN1M0VMD12 TRUE)
set(TARGET_LIKE_MK64FN1M0 TRUE)
set(TARGET_LIKE_MK64FN TRUE)
set(TARGET_LIKE_FREESCALE TRUE)
set(TARGET_LIKE_CORTEX_M4 TRUE)
set(TARGET_LIKE_ARMV7_M TRUE)
set(TARGET_LIKE_ARM TRUE)
set(TARGET_LIKE_GCC TRUE)
set(TARGET_LIKE_MBED TRUE)
set(TARGET_LIKE_MBED_GCC TRUE)
set(TARGET_LIKE_MBED TRUE)
set(TARGET_LIKE_ARM TRUE)
set(TARGET_LIKE_GCC TRUE)
set(YOTTA_CFG TRUE)
set(YOTTA_CFG_MINAR TRUE)
set(YOTTA_CFG_MINAR_INITIAL_EVENT_POOL_SIZE 50)
set(YOTTA_CFG_MINAR_ADDITIONAL_EVENT_POOLS_SIZE 100)
set(YOTTA_CFG_MBED_OS TRUE)
set(YOTTA_CFG_MBED_OS_NET TRUE)
set(YOTTA_CFG_MBED_OS_NET_STACKS TRUE)
set(YOTTA_CFG_MBED_OS_NET_STACKS_LWIP 1)
set(YOTTA_CFG_MBED_OS_STDIO TRUE)
set(YOTTA_CFG_MBED_OS_STDIO_DEFAULT_BAUD 9600)
set(YOTTA_CFG_CMSIS TRUE)
set(YOTTA_CFG_CMSIS_NVIC TRUE)
set(YOTTA_CFG_CMSIS_NVIC_RAM_VECTOR_ADDRESS 0x1FFF0000)
set(YOTTA_CFG_CMSIS_NVIC_FLASH_VECTOR_ADDRESS 0x0)
set(YOTTA_CFG_CMSIS_NVIC_USER_IRQ_OFFSET 16)
set(YOTTA_CFG_CMSIS_NVIC_USER_IRQ_NUMBER 86)
set(YOTTA_CFG_HARDWARE TRUE)
set(YOTTA_CFG_HARDWARE_PINS TRUE)
set(YOTTA_CFG_HARDWARE_PINS_LED_RED PTB22)
set(YOTTA_CFG_HARDWARE_PINS_LED_GREEN PTE26)
set(YOTTA_CFG_HARDWARE_PINS_LED_BLUE PTB21)
set(YOTTA_CFG_HARDWARE_PINS_LED1 LED_RED)
set(YOTTA_CFG_HARDWARE_PINS_LED2 LED_GREEN)
set(YOTTA_CFG_HARDWARE_PINS_LED3 LED_BLUE)
set(YOTTA_CFG_HARDWARE_PINS_LED4 LED_RED)
set(YOTTA_CFG_HARDWARE_PINS_SW2 PTC6)
set(YOTTA_CFG_HARDWARE_PINS_SW3 PTA4)
set(YOTTA_CFG_HARDWARE_PINS_USBTX PTB17)
set(YOTTA_CFG_HARDWARE_PINS_USBRX PTB16)
set(YOTTA_CFG_HARDWARE_PINS_D0 PTC16)
set(YOTTA_CFG_HARDWARE_PINS_D1 PTC17)
set(YOTTA_CFG_HARDWARE_PINS_D2 PTB9)
set(YOTTA_CFG_HARDWARE_PINS_D3 PTA1)
set(YOTTA_CFG_HARDWARE_PINS_D4 PTB23)
set(YOTTA_CFG_HARDWARE_PINS_D5 PTA2)
set(YOTTA_CFG_HARDWARE_PINS_D6 PTC2)
set(YOTTA_CFG_HARDWARE_PINS_D7 PTC3)
set(YOTTA_CFG_HARDWARE_PINS_D8 PTA0)
set(YOTTA_CFG_HARDWARE_PINS_D9 PTC4)
set(YOTTA_CFG_HARDWARE_PINS_D10 PTD0)
set(YOTTA_CFG_HARDWARE_PINS_D11 PTD2)
set(YOTTA_CFG_HARDWARE_PINS_D12 PTD3)
set(YOTTA_CFG_HARDWARE_PINS_D13 PTD1)
set(YOTTA_CFG_HARDWARE_PINS_D14 PTE25)
set(YOTTA_CFG_HARDWARE_PINS_D15 PTE24)
set(YOTTA_CFG_HARDWARE_PINS_I2C_SCL D15)
set(YOTTA_CFG_HARDWARE_PINS_I2C_SDA D14)
set(YOTTA_CFG_HARDWARE_PINS_A0 PTB2)
set(YOTTA_CFG_HARDWARE_PINS_A1 PTB3)
set(YOTTA_CFG_HARDWARE_PINS_A2 PTB10)
set(YOTTA_CFG_HARDWARE_PINS_A3 PTB11)
set(YOTTA_CFG_HARDWARE_PINS_A4 PTC10)
set(YOTTA_CFG_HARDWARE_PINS_A5 PTC11)
set(YOTTA_CFG_HARDWARE_PINS_DAC0_OUT 0xFEFE)
set(YOTTA_CFG_HARDWARE_TEST_PINS TRUE)
set(YOTTA_CFG_HARDWARE_TEST_PINS_SPI TRUE)
set(YOTTA_CFG_HARDWARE_TEST_PINS_SPI_MOSI PTD2)
set(YOTTA_CFG_HARDWARE_TEST_PINS_SPI_MISO PTD3)
set(YOTTA_CFG_HARDWARE_TEST_PINS_SPI_SCLK PTD1)
set(YOTTA_CFG_HARDWARE_TEST_PINS_SPI_SSEL PTD0)
set(YOTTA_CFG_HARDWARE_TEST_PINS_I2C TRUE)
set(YOTTA_CFG_HARDWARE_TEST_PINS_I2C_SDA PTE25)
set(YOTTA_CFG_HARDWARE_TEST_PINS_I2C_SCL PTE24)
set(YOTTA_CFG_HARDWARE_TEST_PINS_SERIAL TRUE)
set(YOTTA_CFG_HARDWARE_TEST_PINS_SERIAL_TX PTC17)
set(YOTTA_CFG_HARDWARE_TEST_PINS_SERIAL_RX PTD2)
set(YOTTA_CFG_UVISOR TRUE)
set(YOTTA_CFG_UVISOR_PRESENT 1)
set(YOTTA_CFG_ARCH TRUE)
set(YOTTA_CFG_ARCH_ARM TRUE)
set(YOTTA_CFG_MBED TRUE)
set(YOTTA_CONFIG_MERGED_JSON_FILE "/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/yotta_config.json")


project(mbed-ethernet-sample)

# Definitions provided by the target configuration info:
if(NOT DEFINED YOTTA_FORCE_INCLUDE_FLAG)
    # backwards-compatibility hack for ARMCC only: Do not add new compilers here!
    if("${CMAKE_C_COMPILER_ID}" STREQUAL "ARMCC")
        set(YOTTA_FORCE_INCLUDE_FLAG "--preinclude")
    else()
        set(YOTTA_FORCE_INCLUDE_FLAG "-include")
    endif()
endif()
add_definitions("${YOTTA_FORCE_INCLUDE_FLAG} \"/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/yotta_config.h\"")

# include root directories of all components we depend on (directly and
# indirectly, including ourself)
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-client")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-connector-interface")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-endpoint-network-eth")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/fxos8700cq")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/lm75b")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-client-c")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-client-mbed-os")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-client-mbedtls")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/nanostack-libservice")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-drivers")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sockets")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/cmsis-core")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/ualloc")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/minar")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/core-util")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/compiler-polyfill")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-freescale")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/uvisor-lib")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-k64f")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/cmsis-core-freescale")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/cmsis-core-k64f")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-frdm-k64f")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/dlmalloc")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/minar-platform")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/minar-platform-mbed")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-stack-lwip")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-driver-lwip-k64f-eth")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-iface-eth")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbedtls")


# recurse into dependencies that aren't built elsewhere
add_subdirectory(
   "/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/ym/mbed-client"
   "${CMAKE_BINARY_DIR}/ym/mbed-client"
)
add_subdirectory(
   "/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/ym/mbed-connector-interface"
   "${CMAKE_BINARY_DIR}/ym/mbed-connector-interface"
)
add_subdirectory(
   "/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/ym/mbed-endpoint-network-eth"
   "${CMAKE_BINARY_DIR}/ym/mbed-endpoint-network-eth"
)
add_subdirectory(
   "/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/ym/fxos8700cq"
   "${CMAKE_BINARY_DIR}/ym/fxos8700cq"
)
add_subdirectory(
   "/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/ym/lm75b"
   "${CMAKE_BINARY_DIR}/ym/lm75b"
)



# And others (typically CMSIS implementations) need to export non-system header
# files. Please don't use this facility. Please. It's much, much better to fix
# implementations that import these headers to import them using the full path.
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-client-c/nsdl-c")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-client-c/source/libNsdl/src/include")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-client-c/source/libCoap/src/include")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/nanostack-libservice/mbed-client-libservice")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-drivers/mbed")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal/mbed-hal")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/cmsis-core/cmsis-core")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/common/phyksz8081")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/drivers/clock")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/drivers/enet")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/drivers/interrupt")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/drivers/pit")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/drivers/pit/common")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/adc")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/can")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/dac")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/dmamux")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/dspi")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/edma")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/enet")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/flextimer")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/gpio")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/i2c")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/llwu")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/lptmr")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/lpuart")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/mcg")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/mpu")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/osc")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/pdb")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/pit")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/pmc")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/port")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/rcm")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/rtc")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/sai")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/sdhc")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/sim")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/smc")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/uart")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/hal/wdog")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-ksdk-mcu/mbed-hal-ksdk-mcu/TARGET_KSDK_CODE/utilities")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-k64f/mbed-hal-k64f")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-k64f/mbed-hal-k64f/device")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-k64f/mbed-hal-k64f/MK64F12")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/cmsis-core-k64f/cmsis-core-k64f")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/mbed-hal-frdm-k64f/mbed-hal-frdm-k64f")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-stack-lwip/sal-stack-lwip")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-stack-lwip/sal-stack-lwip/arch")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-stack-lwip/sal-stack-lwip/lwip")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-stack-lwip/sal-stack-lwip/lwip/include")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-stack-lwip/sal-stack-lwip/lwip/include/ipv4")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-stack-lwip/sal-stack-lwip/lwip/include/netif")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-driver-lwip-k64f-eth/sal-driver-lwip-k64f-eth")
include_directories("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_modules/sal-iface-eth/sal-iface-eth")


# modules with custom CMake build systems may append to the
# YOTTA_GLOBAL_INCLUDE_DIRS property to add compile-time-determined include
# directories:
get_property(GLOBAL_INCLUDE_DIRS GLOBAL PROPERTY YOTTA_GLOBAL_INCLUDE_DIRS)
include_directories(${GLOBAL_INCLUDE_DIRS})

# Provide versions of all the components we depend on, the corresponding
# preprocessor definitions are generated in yotta_config.h
set(YOTTA_MBED_CLIENT_VERSION_STRING "1.4.2")
set(YOTTA_MBED_CLIENT_VERSION_MAJOR 1)
set(YOTTA_MBED_CLIENT_VERSION_MINOR 4)
set(YOTTA_MBED_CLIENT_VERSION_PATCH 2)
set(YOTTA_MBED_CONNECTOR_INTERFACE_VERSION_STRING "1.1.24")
set(YOTTA_MBED_CONNECTOR_INTERFACE_VERSION_MAJOR 1)
set(YOTTA_MBED_CONNECTOR_INTERFACE_VERSION_MINOR 1)
set(YOTTA_MBED_CONNECTOR_INTERFACE_VERSION_PATCH 24)
set(YOTTA_MBED_ENDPOINT_NETWORK_ETH_VERSION_STRING "1.0.7")
set(YOTTA_MBED_ENDPOINT_NETWORK_ETH_VERSION_MAJOR 1)
set(YOTTA_MBED_ENDPOINT_NETWORK_ETH_VERSION_MINOR 0)
set(YOTTA_MBED_ENDPOINT_NETWORK_ETH_VERSION_PATCH 7)
set(YOTTA_FXOS8700CQ_VERSION_STRING "0.1.4")
set(YOTTA_FXOS8700CQ_VERSION_MAJOR 0)
set(YOTTA_FXOS8700CQ_VERSION_MINOR 1)
set(YOTTA_FXOS8700CQ_VERSION_PATCH 4)
set(YOTTA_LM75B_VERSION_STRING "0.1.1")
set(YOTTA_LM75B_VERSION_MAJOR 0)
set(YOTTA_LM75B_VERSION_MINOR 1)
set(YOTTA_LM75B_VERSION_PATCH 1)
set(YOTTA_MBED_ETHERNET_SAMPLE_VERSION_STRING "1.0.4")
set(YOTTA_MBED_ETHERNET_SAMPLE_VERSION_MAJOR 1)
set(YOTTA_MBED_ETHERNET_SAMPLE_VERSION_MINOR 0)
set(YOTTA_MBED_ETHERNET_SAMPLE_VERSION_PATCH 4)

# provide the name of the current module so that it's available to custom CMake
# even if custom CMake does weird things with project()
set(YOTTA_MODULE_NAME mbed-ethernet-sample)

# recurse into subdirectories for this component, using the two-argument
# add_subdirectory because the directories referred to here exist in the source
# tree, not the working directory
add_subdirectory(
    "/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/build/frdm-k64f-gcc/source"
    "${CMAKE_BINARY_DIR}/./source"
)

# make YOTTA_MODULE_NAME available as a preprocessor symbol when
# compiling this module:
target_compile_definitions(mbed-ethernet-sample PRIVATE "-DYOTTA_MODULE_NAME=mbed-ethernet-sample")

# include .cmake files provided by the target:
include("/Users/douans01/Documents/workspace/GitHub/yotta_projects/mbed-ethernet-sample/yotta_targets/mbed-gcc/coverage/coverage.cmake")
